plugins {
    id 'java'
    id 'maven'
    id 'findbugs'

    id 'eclipse'
    id 'idea'

    id 'org.openjfx.javafxplugin' version '0.0.9'
}

group = 'org.jlab.epsci.stream.sampa'
archivesBaseName = 'ersap-sampa'
version = '1.0-SNAPSHOT'

defaultTasks 'build'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
    testCompile.extendsFrom compileOnly
    deployerJars
}


repositories {
    maven {
        url 'https://clasweb.jlab.org/jhep/maven/'
    }
    maven {
        url 'https://clasweb.jlab.org/clas12maven/'
    }
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly 'org.jlab.epsci:ersap-java:1.0-SNAPSHOT'
    compileOnly 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    compile 'org.json:json:20220320'
    compile 'com.lmax:disruptor:3.4.4'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.9.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.15.6'
    implementation 'org.jetbrains:annotations:23.0.0'
    deployerJars 'org.apache.maven.wagon:wagon-ssh-external:3.5.2'
    testCompile 'junit:junit:4.13.2'
    testCompile 'org.hamcrest:hamcrest-library:2.2'
    testCompile 'org.mockito:mockito-core:4.8.0'
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls' ]
}

javadoc {
    options.charSet = 'utf8'
    options.encoding = 'utf8'
    options.docEncoding = 'utf8'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
//    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: 'scpexe://ifarm65.jlab.org/group/clas/www/clasweb/html/clas12maven') {
                authentication(userName: 'clas12')
            }
        }
    }
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
}


def deploySpec = copySpec {
    into ('plugins/epsci/lib') {
        from configurations.runtime
    }
    into ('plugins/epsci/lib') {
        from jar.archivePath
    }
}


task deploy(type: Copy, overwrite: true, dependsOn: jar) {
    def dest = "$System.env.ERSAP_HOME"

    into dest
    with deploySpec

    doFirst {
        if (dest == 'null') {
            throw new GradleException('ERSAP_HOME not set')
        }
    }
}


findbugs {
    toolVersion = '3.0.1'
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = file('config/quality/findbugs-exclude.xml')
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Marker task to enable findbugs.
task findbugs(
        group: 'Verification',
        description: 'Marker task to enabled findbugs.'
)

gradle.taskGraph.whenReady { taskGraph ->
    tasks.findbugsMain.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
    tasks.findbugsTest.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
}



eclipse {
    classpath {
        defaultOutputDir = file("${buildDir}/eclipse-classes")
    }
}
